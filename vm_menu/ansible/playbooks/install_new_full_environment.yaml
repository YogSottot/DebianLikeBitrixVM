---
- name: Installing of a new full environment
  hosts: localhost
  connection: local
  become: true
  gather_facts: false
  vars:
    bx_temporary_files_directory: "{{ path_sites }}/.bx_temp/{{ db_name }}/"
  tasks:
    - name: Add cron agents
      ansible.builtin.include_tasks: "tasks/add_cron_agents.yaml"
      vars:
        path_file_run_cron: "{{ document_root }}{{ bx_cron_agents_path_file_after_document_root }}"
        user_site: "{{ user_server_sites }}"
        group_user_site: "{{ group_user_server_sites }}"
        logs_path_dir: "{{ bx_cron_logs_path_dir }}"
        logs_path_file: "{{ bx_cron_logs_path_file }}"

    - name: Creating directory from bitrix temporary files
      ansible.builtin.file:
        state: directory
        path: "{{ bx_temporary_files_directory }}"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_dirs }}"
        recurse: true

    - name: Restarting MySQL service
      ansible.builtin.service:
        name: mariadb
        state: restarted

    - name: Creating array for deleting files
      ansible.builtin.set_fact:
        dell_files: "{{ delete_files.split(',') }}"
      no_log: true

    - name: Deleting files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ dell_files }}"

    - name: Creating array with urls
      ansible.builtin.set_fact:
        urls: "{{ download_bitrix_install_files_new_site.split(',') }}"
      no_log: true

    - name: Downloading Bitrix scripts
      ansible.builtin.get_url:
        url: "{{ item }}"
        dest: "{{ document_root }}"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"
        timeout: "{{ timeout_download_bitrix_install_files_new_site }}"
      ignore_errors: true
      with_items: "{{ urls }}"

    - name: Creating of downloaded file names array
      ansible.builtin.set_fact:
        file_names_download: "{{ urls | map('basename') | list }}"
      no_log: true

    - name: Generating index.html using links of downloaded files
      ansible.builtin.template:
        dest: "{{ document_root }}/index.html"
        src: "roles/create_site/templates/site_full_tpl/index.j2"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"
      no_log: true

    - name: Creating directory bitrix/php_interface
      ansible.builtin.file:
        state: directory
        path: "{{ document_root }}/bitrix/php_interface"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_dirs }}"

    - name: Generating dbconn.php file
      ansible.builtin.template:
        dest: "{{ document_root }}/bitrix/php_interface/dbconn.php"
        src: "roles/create_site/templates/site_full_tpl/dbconn.j2"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"

    - name: Generating .settings.php file
      ansible.builtin.template:
        dest: "{{ document_root }}/bitrix/.settings.php"
        src: "roles/create_site/templates/site_full_tpl/.settings.j2"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"

    ############## SITE FILES ##############
    - name: Adding .htaccess file
      ansible.builtin.copy:
        src: "roles/create_site/files/site_files/.htaccess"
        dest: "{{ document_root }}"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: "{{ permissions_sites_files }}"

    ############## NGINX ##############
    - name: Generate ssl-cert and dhparam
      ansible.builtin.include_tasks: "tasks/ssl_selfsigned.yaml"

    - name: Get Nginx version
      ansible.builtin.command: nginx -v
      register: nginx_version_output
      changed_when: false

    - name: Extract Nginx version number
      ansible.builtin.set_fact:
        nginx_version: "{{ nginx_version_output.stderr | regex_search('\\d+\\.\\d+\\.\\d+') }}"

    - name: Copying nginx_files directory to /etc/{{ service_nginx_name }}
      ansible.builtin.copy:
        src: "roles/create_site/files/nginx_files/"
        dest: "/etc/{{ service_nginx_name }}/"
        owner: root
        group: root
        mode: '644'

    - name: Insert include line into http section of nginx.conf
      ansible.builtin.blockinfile:
        path: "/etc/{{ service_nginx_name }}/nginx.conf"
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        block: |
          include custom_conf.d/section_http/*.conf;
        insertafter: "^http\\s*{"

    - name: Adding Nginx configuration file
      ansible.builtin.template:
        dest: "{{ path_nginx_sites_conf }}/default.conf"
        src: "roles/create_site/templates/nginx_conf/default.j2"
        owner: root
        group: root
        mode: '644'

    - name: Creating symbol link (site_enable) for Nginx configuration file
      ansible.builtin.file:
        src: "{{ path_nginx_sites_conf }}/default.conf"
        dest: "{{ path_nginx_sites_enabled }}/default.conf"
        state: link

    - name: Creating symbol link for Nginx rtc configuration file
      ansible.builtin.file:
        src: "{{ path_nginx_sites_conf }}/rtc.conf"
        dest: "{{ path_nginx_sites_enabled }}/rtc.conf"
        state: link

    - name: Adding Nginx site_settings directory
      ansible.builtin.file:
        path: "{{ path_nginx }}/site_settings/{{ domain }}"
        state: directory
        owner: root
        group: root
        mode: '755'

    - name: Adding Nginx site_settings file
      ansible.builtin.template:
        dest: "{{ path_nginx }}/site_settings/{{ domain }}/bx_temp.conf"
        src: "roles/create_site/templates/nginx_conf/bx_temp.j2"
        owner: root
        group: root
        mode: '644'

    - name: Restarting Nginx
      ansible.builtin.systemd:
        name: "{{ service_nginx_name }}"
        state: restarted


    ############## APACHE ##############
    - name: Adding Apache configuration file
      ansible.builtin.template:
        dest: "{{ path_apache_sites_conf }}/default.conf"
        src: "roles/create_site/templates/apache_conf/default.j2"
        owner: root
        group: root
        mode: '644'

    - name: Creating symbol link (site_enable) for Apache configuration file
      ansible.builtin.file:
        src: "{{ path_apache_sites_conf }}/default.conf"
        dest: "{{ path_apache_sites_enabled }}/default.conf"
        state: link

    - name: Restarting Apache
      ansible.builtin.systemd:
        name: "{{ service_apache_name }}"
        state: restarted

    ############## PHP-FPM ##############
    - name: Setup PHP settings
      ansible.builtin.include_role:
        name: geerlingguy.php

    ############## MySQL ##############
    - name: Setup MySQL settings
      ansible.builtin.include_role:
        name: geerlingguy.mysql

# Change site user for connection SSH
    - name: Installing of python3-passlib
      ansible.builtin.apt:
        name: python3-passlib
        state: present

    - name: Creating home directory for user {{ user_server_sites }}
      ansible.builtin.file:
        path: "/home/{{ user_server_sites }}"
        state: directory
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: '0755'

    - name: Creating directory .ssh
      ansible.builtin.file:
        path: "/home/{{ user_server_sites }}/.ssh"
        state: directory
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: '0700'

    - name: Generating SSH key
      ansible.builtin.command: ssh-keygen -t ed25519 -b 2048 -f "/home/{{ user_server_sites }}/.ssh/ed25519" -N ''
      args:
        creates: "/home/{{ user_server_sites }}/.ssh/ed25519"

    - name: Copying public key in authorized_keys
      ansible.builtin.copy:
        src: "/home/{{ user_server_sites }}/.ssh/ed25519.pub"
        dest: "/home/{{ user_server_sites }}/.ssh/authorized_keys"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        mode: '0600'

    - name: Change the rights to the directory
      ansible.builtin.file:
        path: "/home/{{ user_server_sites }}"
        owner: "{{ user_server_sites }}"
        group: "{{ group_user_server_sites }}"
        recurse: true

    - name: Change user {{ user_server_sites }} for connecting SSH
      ansible.builtin.lineinfile:
        path: /etc/passwd
        regexp: "^{{ user_server_sites }}:"
        line: "{{ user_server_sites }}:x:33:33:{{ group_user_server_sites }}:{{ path_sites }}:/bin/bash"
        state: present

    - name: Setting password from user {{ user_server_sites }}
      ansible.builtin.user:
        name: "{{ user_server_sites }}"
        password: "{{ site_user_password | password_hash('sha512', 'passlib') }}"

    - name: Link creating
      ansible.builtin.file:
        src: "/home/{{ user_server_sites }}/.ssh"
        dest: "{{ path_sites }}/.ssh"
        state: link

    - ansible.builtin.include_tasks: "tasks/change_owner_and_group_symbolic_links.yaml"
      vars:
        path_links:
          - ".ssh"
        full_path: "{{ path_sites }}"
