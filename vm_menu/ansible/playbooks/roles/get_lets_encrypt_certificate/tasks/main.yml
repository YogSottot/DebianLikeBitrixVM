---
# tasks file for get_lets_encrypt_certificate
- name: Installing of Certbot
  ansible.builtin.apt:
    name: certbot
    state: latest

- name: Getting SSL certificate
  ansible.builtin.shell: |
        certbot certonly --webroot --webroot-path {{ path_site }} --non-interactive --agree-tos --expand --allow-subset-of-names --deploy-hook "systemctl reload nginx" --email {{ email }} -d {{ domain }} {% if is_www == 'Y' %}-d www.{{ domain }}{% endif %}
  args:
    creates: /etc/letsencrypt/live/{{ domain }}/fullchain.pem

- name: Searching domain directory
  ansible.builtin.find:
    paths: "{{ letsencrypt_live_dir }}"
    file_type: directory
    patterns: "{{ domain }}*"
  register: found_directory_domain

- name: Saving founded directory in variable
  ansible.builtin.set_fact:
    cert_full_domain_directory: "{{ found_directory_domain.files | map(attribute='path') | list | first }}"

- name: Checking is default site
  ansible.builtin.set_fact:
    nginx_config: "{{ domain }}"
  when: default_full_path_site != path_site

- name: Checking Nginx configuration file
  ansible.builtin.stat:
    path: "{{ path_nginx }}/site_settings/{{ nginx_config }}/ssl.conf"
  register: real_nginx_config_file

- name: Changing Nginx configuration
  block:
    - name: Setting variables
      ansible.builtin.set_fact:
        ssl_cert_full_path: "{{ cert_full_domain_directory }}/{{ file_fullchain }}"
        ssl_cert_key_full_path: "{{ cert_full_domain_directory }}/{{ file_privkey }}"
        ssl_trusted_certificate_full_path: "{{ cert_full_domain_directory }}/{{ file_chain }}"

    - name: Loading Nginx configuration
      when: cert_full_domain_directory != "" and real_nginx_config_file.stat.exists
      ansible.builtin.slurp:
        src: "{{ path_nginx }}/site_settings/{{ nginx_config }}/ssl.conf"
      register: nginx_conf_data

    - name: Processing Nginx configuration
      ansible.builtin.set_fact:
        new_nginx_conf: |
          {%- set start = {'word': false} -%}
          {% for line in nginx_conf_data.content | b64decode | split('\n') %}
            {%- set stripped_line = line.strip() -%}
            {%- if stripped_line == "### START PLEASE DONT DELETE OR EDIT THIS COMMENT MANAGED SSL CERTS. YOU CAN MAKE EDITS BETWEEN THESE COMMENTS ###" -%}
              {%- if start.update({'word': true}) -%} {% endif -%}
            {%- elif stripped_line == "### END PLEASE DONT DELETE OR EDIT THIS COMMENT MANAGED SSL CERTS. YOU CAN MAKE EDITS BETWEEN THESE COMMENTS ###" -%}
              {%- if start.update({'word': false}) -%} {% endif -%}
            {%- endif -%}
            {%- if start.word -%}
                {%- if 'include ' in line -%}
                  {%- set line = line.replace('#', '') -%}
                  {%- set line = '#' + line -%}
                {%- endif -%}
                {%- if 'ssl_certificate ' in line -%}
                  {%- set line = line.replace(line.split('ssl_certificate')[1], ' ' + ssl_cert_full_path + ';') -%}
                  {%- set line = line.replace('#', '') -%}
                {%- elif 'ssl_certificate_key ' in line -%}
                  {%- set line = line.replace(line.split('ssl_certificate_key')[1], ' ' + ssl_cert_key_full_path + ';') -%}
                  {%- set line = line.replace('#', '') -%}
                {%- elif 'ssl_trusted_certificate ' in line -%}
                  {%- set line = line.replace(line.split('ssl_trusted_certificate')[1], ' ' + ssl_trusted_certificate_full_path + ';') -%}
                  {%- set line = line.replace('#', '') -%}
                {%- endif -%}
            {%- endif -%}
            {{ line }}
          {% endfor %}

    - name: Saving new Nginx configuration
      ansible.builtin.copy:
        content: "{{ new_nginx_conf }}"
        dest: "{{ path_nginx }}/site_settings/{{ nginx_config }}/ssl.conf"
        owner: root
        group: root
        mode: '644'

    - name: Restarting Nginx
      ansible.builtin.systemd:
        name: "{{ service_nginx_name }}"
        state: reloaded

- name: Creating of redirection HTTP to HTTPS enabled for the site {{ domain }}
  ansible.builtin.include_tasks: "tasks/redirect_http_to_https.yaml"
  when: redirect_to_https == "Y"
