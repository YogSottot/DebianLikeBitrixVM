---
# tasks file for bx_push_server
- name: Check if push-server is installed
  ansible.builtin.stat:
    path: "/opt/node_modules/push-server"
  register: bx_push_server_installed

- name: Check if push-server config is exist
  ansible.builtin.stat:
    path: "/etc/default/push-server-multi"
  register: bx_push_server_config
- name: Extract existing push key
  ansible.builtin.slurp:
    src: "/etc/default/push-server-multi"
  register: existing_config
  when: bx_push_server_config.stat.exists and bx_push_server_push_key is not defined

- name: Set push key fact
  ansible.builtin.set_fact:
    bx_push_server_push_key: "{{ existing_config['content'] | b64decode | regex_search('SECURITY_KEY=\"([^\"]+)\"', '\\1') | first }}"
  when: existing_config is defined and existing_config.content is defined

- name: Download push-server archive
  ansible.builtin.get_url:
    url: "{{ bx_push_server_archive_url }}"
    dest: "/opt/{{ bx_push_server_archive_name }}"
    checksum: "sha256:{{ bx_push_server_archive_sha256 }}"
    timeout: 60
    owner: "{{ bx_push_server_user }}"
    group: "{{ bx_push_server_group }}"
    mode: "0644"
  register: download_result
  failed_when:
    - download_result.status_code is defined
    - download_result.status_code != 200
    - "'Connection timed out' in download_result.msg"
  when: not bx_push_server_installed.stat.exists or bx_push_server_force_upgrade

- name: Use local archive if download failed
  ansible.builtin.copy:
    src: "files/{{ bx_push_server_archive_name }}"
    dest: "/opt/{{ bx_push_server_archive_name }}"
    owner: "{{ bx_push_server_user }}"
    group: "{{ bx_push_server_group }}"
    mode: "0644"
  when: download_result is failed or bx_push_server_force_upgrade

- name: Verify local archive checksum
  ansible.builtin.stat:
    path: "/opt/{{ bx_push_server_archive_name }}"
    checksum_algorithm: sha256
  register: local_archive
  failed_when: local_archive.stat.checksum != bx_push_server_archive_sha256
  when: not bx_push_server_installed.stat.exists or bx_push_server_force_upgrade

- name: Ensure npm is installed
  ansible.builtin.apt:
    name: npm
    state: present
    update_cache: true
  become: true
  when: not bx_push_server_installed.stat.exists
- name: Install push-server
  community.general.npm:
    name: "/opt/{{ bx_push_server_archive_name }}"
    global: false
    production: true
    path: "/opt"
    state: present
  when: bx_push_server_force_upgrade or not bx_push_server_installed.stat.exists

- name: Remove push-server archive
  ansible.builtin.file:
    path: "/opt/{{ bx_push_server_archive_name }}"
    state: absent

- name: Create symbolic links
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  loop:
    - { src: "/opt/node_modules/push-server/etc/push-server", dest: "/etc/push-server" }
    - { src: "/opt/node_modules/push-server", dest: "/opt/push-server" }

- name: Copy push-server-multi script
  ansible.builtin.copy:
    src: "/opt/push-server/etc/init.d/push-server-multi"
    dest: "/usr/local/bin/push-server-multi"
    mode: '0755'
    remote_src: true
  when: bx_push_server_force_upgrade or not bx_push_server_installed.stat.exists

- name: Update configuration file path in push-server-multi script
  ansible.builtin.replace:
    path: "/usr/local/bin/push-server-multi"
    regexp: 'CONF=/etc/sysconfig/push-server-multi'
    replace: 'CONF=/etc/default/push-server-multi'
  when: bx_push_server_force_upgrade or not bx_push_server_installed.stat.exists

- name: Generate random string for push_key if not exists
  ansible.builtin.set_fact:
    bx_push_server_push_key: "{{ lookup('community.general.random_string', length=128, digits=true, special=false) }}"
  when: bx_push_server_push_key is not defined

- name: Configure push-server
  ansible.builtin.template:
    src: push-server-multi-config.j2
    dest: "/etc/default/push-server-multi"
    mode: '0644'
    force: true
  when: bx_push_server_force_config or not bx_push_server_config.stat.exists

- name: Copy and modify push-server.service
  ansible.builtin.template:
    src: push-server.service.j2
    dest: "/etc/systemd/system/push-server.service"
    mode: '0644'

- name: Generate configs
  ansible.builtin.command: "/usr/local/bin/push-server-multi configs {{ item }}"
  loop:
    - pub
    - sub
  changed_when: false

- name: Create tmpfiles configuration
  ansible.builtin.copy:
    content: "d /tmp/push-server 0770 {{ bx_push_server_user }} {{ bx_push_server_group }} -"
    dest: "/etc/tmpfiles.d/push-server.conf"
    mode: '0644'

- name: Create tmpfiles
  ansible.builtin.command: systemd-tmpfiles --create
  changed_when: false

- name: Ensure log directory exists
  ansible.builtin.file:
    path: "/var/log/push-server"
    state: directory
    owner: "{{ bx_push_server_user }}"
    group: "{{ bx_push_server_group }}"
    mode: '0755'

- name: Reload systemd
  ansible.builtin.systemd:
    daemon_reload: true

- name: Ensure push-server service is enabled and started
  ansible.builtin.systemd:
    name: push-server
    enabled: true
    state: restarted
