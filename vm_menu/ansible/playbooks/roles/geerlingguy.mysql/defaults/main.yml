# Set a random password.
mysql_autogenerated_password: "{{ lookup('password', '/dev/null length=20 chars=ascii_letters') }}"

# Set mysql flavor (mariadb / percona)
mysql_flavor: percona

# Set mysql percona version (5.7 / 8.0)
mysql_percona_version: "{{ mysql_version }}"
# Set mysql mariadb version (5.5 / 10.11)
mysql_mariadb_version: "{{ mysql_version }}"

mysql_version: "8.0"

# Set this to the user ansible is logging in as - should have root
# or sudo access
mysql_user_home: /root
mysql_user_name: root
mysql_user_password: "{{ mysql_autogenerated_password }}"

# The default root user installed by mysql - almost always root
mysql_root_home: /root
mysql_root_username: root
mysql_root_password: "{{ mysql_autogenerated_password }}"

# Set this to `true` to forcibly update the root password.
mysql_root_password_update: true
mysql_user_password_update: false

mysql_enabled_on_startup: true

# The following variables have a default value depending on operating system.
# mysql_config_file: /etc/my.cnf
# mysql_log_dir: /var/log/mysql
# mysql_config_include_dir: "/etc/mysql/mariadb.conf.d"

# Pass in a comma-separated list of repos to use (e.g. "remi,epel"). Used only
# for RedHat systems (and derivatives).
mysql_enablerepo: ""

# Define a custom list of packages to install; if none provided, the default
# package list from vars/[OS-family].yml will be used.
# mysql_packages:
#   - mysql
#   - mysql-server
#   - MySQL-python

mysql_python_package_debian: python3-mysqldb

# MySQL connection settings.
mysql_port: "3306"
mysql_bind_address: '127.0.0.1'
mysql_mysqlx_bind_address: '127.0.0.1'
mysql_skip_name_resolve: true
mysql_datadir: /var/lib/mysql
mysql_sql_mode: '""'
mysql_skip_networking: true
# The following variables have a default value depending on operating system.
# mysql_pid_file: /var/run/mysqld/mysqld.pid
# mysql_socket: /var/lib/mysql/mysql.sock

# Log file settings.
# mysql_log_file_group: mysql

# Slow query log settings.
mysql_slow_query_log_enabled: false
mysql_slow_query_time: "2"
# The following variable has a default value depending on operating system.
# mysql_slow_query_log_file: /var/log/mysql-slow.log

### Automated settings, if has not been defined by the user
#
## Per thread buffers:
# mysql_sort_buffer_size: "256K"
# mysql_join_buffer_size:
# mysql_read_buffer_size:
# mysql_read_rnd_buffer_size:
# mysql_max_connections:
#
## Server_buffers
# mysql_tmp_table_size:
# mysql_max_heap_table_size:
# mysql_query_cache_type: # enabled by default
# mysql_query_cache_size:
# mysql_query_cache_limit:
mysql_query_cache_strip_comments: "1"
#
# Set .._buffer_pool_size up to 80% of RAM but beware of setting too high.
# mysql_innodb_buffer_pool_size: "256M"
# Set .._log_file_size to 25% of buffer pool size.
# mysql_innodb_log_file_size:
# mysql_innodb_log_buffer_size: "16M"
#
### End of automated settings

# Memory settings.
mysql_key_buffer_size: "8M"
mysql_table_open_cache: "2048"
mysql_table_definition_cache: "4096"
mysql_myisam_sort_buffer_size: "1M"
mysql_thread_cache_size: "32"
mysql_max_allowed_packet: "16M"
mysql_group_concat_max_len: "1024"

# Other settings.
mysql_lower_case_table_names: "0"
mysql_wait_timeout: ""
mysql_event_scheduler_state: "OFF"
mysql_transaction_isolation: "READ-COMMITTED"
mysql_low_priority_updates: true
mysql_log_timestamps: SYSTEM


# thread handling
# mysql_thread_handling: "pool-of-threads"
# mysql_thread_pool_size: ""

# SHOW VARIABLES WHERE Variable_name LIKE 'character\_set\_%' OR Variable_name LIKE 'collation%';
# collations
mysql_character_set_server: "utf8mb4"
mysql_collation_server: "utf8mb4_0900_ai_ci"

# InnoDB settings.
mysql_innodb_file_per_table: "1"
# https://github.com/major/MySQLTuner-perl/issues/714
# https://github.com/major/MySQLTuner-perl/issues/784
# mysql_innodb_redo_log_capacity: "100M"
mysql_innodb_flush_log_at_trx_commit: "2"
mysql_innodb_flush_method: "O_DIRECT"
mysql_innodb_lock_wait_timeout: "50"
mysql_innodb_strict_mode: "OFF"

# perfomance schema
mysql_performance_schema: "OFF"

# These settings require MySQL > 5.5.
mysql_innodb_large_prefix: "1"
mysql_innodb_file_format: "barracuda"

# mysqldump settings.
mysql_mysqldump_max_allowed_packet: "128M"

# Logging settings.
mysql_log: ""
# The following variables have a default value depending on operating system.
# mysql_log_error: /var/log/mysql/mysql.err
# mysql_syslog_tag: mysql

mysql_config_include_files: []
#  - src: path/relative/to/playbook/file.cnf
#  - { src: path/relative/to/playbook/anotherfile.cnf, force: yes }

# mysql_extra_config: |
#  collation = utf8_general_ci
#  character_set_server = utf8

# Databases.
mysql_databases:
    - name: "{{ db_name }}"
      collation: "{{ mysql_collation_server }}"
      encoding: "{{ mysql_character_set_server }}"
#      replicate: 1

# Users.
mysql_users:
    - name: "{{ db_user }}"
      host: "localhost"
      password: "{{ db_password }}"
      priv: "{{ db_name }}.*:ALL"

## To use the password from mysql_users later in a Jinja2 template, you can access it like this:
# {{ mysql_users[0].password }}
## This assumes you're referring to the first user in the mysql_users list. If you need to access a specific user's password by name, you could use a Jinja2 filter like this:

# `{{ (mysql_users | selectattr('name', 'equalto', 'bitrix0') | list | first).password }}
## This would retrieve the password for the user named 'bitrix0'. Remember to adjust the user name as needed for your specific use case.

mysql_disable_log_bin: true

# Replication settings (replication is only enabled if master/user have values).
mysql_server_id: "1"
mysql_max_binlog_size: "100M"
mysql_binlog_format: "ROW"
mysql_expire_logs_days: "10"
mysql_replication_role: ''
mysql_replication_master: ''
mysql_replication_master_inventory_host: "{{ mysql_replication_master }}"

# Same keys as `mysql_users` above.
mysql_replication_user: []

mysql_hide_passwords: false
