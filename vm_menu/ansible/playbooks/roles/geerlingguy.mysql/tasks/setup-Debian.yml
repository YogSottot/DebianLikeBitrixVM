---
- name: Check if MySQL is already installed.
  ansible.builtin.stat:
    path: "{{ mysql_config_file }}"
  register: mysql_installed

- name: Ensure MySQL repo is installed.
  ansible.builtin.apt:
    deb: "{{ mysql_percona_repo_baseurl }}/{{ mysql_percona_repo_release }}.{{ ansible_distribution_release }}_all.deb"
    state: present
  when: mysql_flavor == 'percona' and not mysql_installed.stat.exists

- name: Setup Percona release
  ansible.builtin.command: percona-release setup ps{{ mysql_percona_version | regex_replace('[.~]', '') }}
  changed_when: false
  when: mysql_flavor == 'percona' and not mysql_installed.stat.exists

- name: Update apt cache if MySQL is not yet installed.
  ansible.builtin.apt:
    update_cache: true
  changed_when: false
  when: not mysql_installed.stat.exists

- name: Ensure MySQL percona packages are installed.
  ansible.builtin.apt:
    name: "{{ mysql_percona_packages }}"
    state: present
  when: mysql_flavor == 'percona' and not mysql_installed.stat.exists
  environment:
    DEBIAN_FRONTEND: noninteractive
    # DEBIAN_PRIORITY: critical
  register: deb_percona_install_packages

- name: Ensure MySQL packages are installed.
  ansible.builtin.apt:
    name: "{{ mysql_packages }}"
    state: present
    policy_rc_d: 101
  register: deb_mysql_install_packages

- name: Ensure MySQL Python libraries are installed.
  ansible.builtin.apt:
    name: "{{ mysql_python_package_debian }}"
    state: present

- name: Ensure MySQL mariadbb-5.5 packages are installed.
  ansible.builtin.import_tasks:
    file: mariadb-5.5.yml
  when: mysql_flavor =='mariadb' and mysql_mariadb_version == '5.5' and not mysql_installed.stat.exists

- name: Correct my.cnf version is selected
  community.general.alternatives:
    name: my.cnf
    path: "{{ mysql_config_file }}"

# Because Ubuntu starts MySQL as part of the install process, we need to stop
# mysql and remove the logfiles in case the user set a custom log file size.
- name: Ensure MySQL is stopped after initial install.
  ansible.builtin.service:
    name: "{{ mysql_daemon }}"
    state: stopped
  when: not mysql_installed.stat.exists
